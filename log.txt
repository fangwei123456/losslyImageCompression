5 通道数256 最小mseLoss=80
6 通道数128 最小mseLoss=75 因此用128的通道数
7 修正了bug
8 增加指数衰减的强度为1/64 收敛更快 mseLoss略微减少 最小mseLoss=81
9 增加一层卷积 效果更差
10 减少一层卷积 最小mseLoss=56 训练中 
11 尝试自定义norm操作 训练中
12 在10的基础上（只有1层卷积） 将卷积核大小从9减小到3 效果极差
13 在10的基础上（只有1层卷积） 将卷积核大小从9减小到5 效果极差
14 在10的基础上 增加了卷积的padding 使得卷积后图像大小不变 效果极好 最小mseLoss=5.32
15 修改反卷积为卷积进行测试 其他与14相同 效果很差
16 基于14 去掉xA 最小mseLoss=17.58
17 基于14 尝试用多层小卷积核替代单层的大卷积核 最小mseLoss=6.04
18 在17的基础上 采样倍率2 最小mseLoss=5.63
19 在18的基础上 采样倍率4 最小mseLoss=16.08
20 在19的基础上 采样倍率8 mseLoss=467.63
21 在18的基础上 尝试降低通道数为原来的一半  mseLoss=8.75
22 在21的基础上 继续降低通道数为原来的一半 mseLoss=15.71
23 在22的基础上 增加32通道的卷积层数量 mesLoss=3.98
24 在22的基础上 增加32通道 64通道的卷积层数量 mseLoss=5.46
25 在24的基础上 卷积核大小从3增加到5 ssim=0.9798
26 在25的基础上 加入量化 看看效果如何 ssim=0.9612
27 降低到16通道 ssim=0.9158
28 降低到8通道 ssim=0.7300
29 降低到4通道 ssim=0.7457
30 在26的基础上 图片长宽都除以2（总共除以4 相当于28.py）ssim=0.7223
31 改进了代码结构 尝试逐层加深 而不是直接1到128 而是缓慢增加 但发现效果很差
实验结论
去掉x = x / (torch.norm(x) + 1e-6) 效果变差
增加拉普拉斯算子提取边缘后 按边缘强度指数衰减的loss进行优化 效果变好 最小mseLoss=62
去掉xA 效果极差
增加多个xA 效果极差
减小卷积核大小 效果极差
卷积加入padding使得图像尺寸不变 收敛极大地加快 效果大幅度变好 
将反卷积改成卷积 效果很差
用多层小卷积核替代单层的大卷积核 收敛极快 效果极好
编码器缓慢增加通道数 效果很差

25 29 27 26 28
